"""
                    Rochester Institute of Technology Dubai

                    Information Security Programming 201.600

                                Assignment II


                                Chatbot Client
                                

Language: Python 3

Group: Rashed Alnuman, Ammar Albanna, Komil mamasaliev, Mohammad Mohammad

Description: Chatbot Client that connects to the interactive server, accepts questions and
             returns html pages of questions when requested
"""



try:
    
    import sys
    import socket
    from pyDes import *
    from time import sleep

except ImportError as IE:
    print(IE, "\n Exiting Client...")
    sys.exit(1)




def recieve(sock):

    """
    recieves data from server, decrypts if encryption is required originally
    and returns the results. Handles server connection termination by
    informing the user and exiting with exit code 0
    """

    try:
        data = sock.recv(1024)
        #print(data) unlock if you want to see encrypted data raw
        decrypted_data = DEScrypt(data, 2, session_key)
        data_str = decrypted_data.decode("utf-8")
        return "Server:  " + data_str
    except:
        print("Session ended with gary the chatbot")
        sys.exit(0)


def Encryption_protocol(DES):

    """
    Prompts user for security credentials, username, password and authentication.
    Then sends a EC packet containing this information to the server.
    If encryption isnt required by the user then the function simply does nothing.
    """
    


    global username
    global password
    global authentication
    global encryption
    

    if DES == '0':  # if user doesnt want encryption then do nothing
        
        password = ''
        encryption = False
        return None
    
    encryption = True
    
    username = input("Enter your username:  ")
    password = input("Enter the password:  ")      
    authentication = input("Enter the authentication:  ")
    packet = bytes("EC," + authentication + ',' + username + ':' + password, encoding = "utf-8")
    sock.sendto(packet,(host,port))
    #sending the security details to the server
    #very fancy indeed, top notch security measures



def DEScrypt(msg, mod, key):

    """
    Uses Triple DES algorithm to encrypt string or bytes passed to function,
    mod defines whether to encrypt or decrypt and key is the key (obviously)
    to either encrypt or decrypt. if encryption is false meaning no encryption
    is required by the client-user then it will return a byte format of the
    original string
    """

    if encryption == True:
    
        #this is the key             #i dont know what the rest are but dont touch them, required to work
        cipher = des(key, CBC, "\0\0\0\0\0\0\0\0", pad = None, padmode = PAD_PKCS5)

        if mod == 1:
            encrypted_data = cipher.encrypt(msg)
            return encrypted_data

        elif mod == 2:
            decrypted_data = cipher.decrypt(msg)
            return decrypted_data
        
    else:
        return msg
    





"""
Static host, port and public key. Creates TCP socket to communicate with the TCP server chatbot.
Prompts user if encryption is required, creates setup packet which with last value determining
encryption as true or false through 1 and 0 respectively. Recieves session key generated by
server and enters a while loop where user can keep entering questions and commands until
the word end is provided, which signals the server to end communication.
"""

    
host = '127.0.0.1'  # Server's IP address
port = 65432        # The port the server is specifically listening on

global public_key
public_key = "1a2b3c4d"

try:
        
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((host, port))

        """
        Packet structure of TTP is as the following:

        Packet type, Protocol, Version, Encryption yes/no
        """

            
        enc = input("Encrypt Traffic?:  ")

        DES = '1' if enc.lower() == "yes" else '0'  #ternary operator expression
               
                                            
        SSpacket = bytes("SS,TTP,V1.0," +DES, encoding = "utf-8")

        sock.sendto(SSpacket,(host, port))
            
        if DES == '1':
            global session_key
                
            Encryption_protocol(DES)
            sess_key_enc = sock.recv(1024)
            session_key_dec = DEScrypt( sess_key_enc, 2, public_key)
            session_key = session_key_dec.decode("utf-8").split(',')[1]
            setup_packet = sock.recv(1024)
            if setup_packet.decode("utf-8") == "CC":
                print("Connection established with encryption, Server ready to recieve commands on secure line...")
                print("خادم الكمبيوتر جاهز لتلقي الأوامر")
                
        else:
            Encryption_protocol(DES)
            session_key = ""
            print(recieve(sock))
                
          
         
                
        while True:

            print("\n")
            command = input("Enter question:  ")
            IR_packet = bytes("IR," + command, encoding = "utf-8")
            sock.sendto( DEScrypt(IR_packet, 1, session_key),(host,port))
            print(recieve(sock))
            print(recieve(sock))
                

                
               
            

except ConnectionResetError as CRE:
    print("Server has terminated the connection... \n Exiting...")
    sleep(2)
    sys.exit(1)



